{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "44573fc2",
   "metadata": {
    "papermill": {
     "duration": 0.004722,
     "end_time": "2025-05-30T15:37:41.850718",
     "exception": false,
     "start_time": "2025-05-30T15:37:41.845996",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Pandas](https://www.kaggle.com/learn/pandas) course.  You can reference the tutorial at [this link](https://www.kaggle.com/residentmario/grouping-and-sorting).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36ac5378",
   "metadata": {
    "papermill": {
     "duration": 0.003647,
     "end_time": "2025-05-30T15:37:41.858467",
     "exception": false,
     "start_time": "2025-05-30T15:37:41.854820",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "In these exercises we'll apply groupwise analysis to our dataset.\n",
    "\n",
    "Run the code cell below to load the data before running the exercises."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f922118",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:41.867365Z",
     "iopub.status.busy": "2025-05-30T15:37:41.867051Z",
     "iopub.status.idle": "2025-05-30T15:37:46.842655Z",
     "shell.execute_reply": "2025-05-30T15:37:46.841591Z"
    },
    "papermill": {
     "duration": 4.981919,
     "end_time": "2025-05-30T15:37:46.844169",
     "exception": false,
     "start_time": "2025-05-30T15:37:41.862250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup complete.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/learntools/pandas/grouping_and_sorting.py:29: FutureWarning: The provided callable <built-in function min> is currently using SeriesGroupBy.min. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"min\" instead.\n",
      "  _expected = reviews.groupby('variety').price.agg([min, max])\n",
      "/usr/local/lib/python3.11/dist-packages/learntools/pandas/grouping_and_sorting.py:29: FutureWarning: The provided callable <built-in function max> is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n",
      "  _expected = reviews.groupby('variety').price.agg([min, max])\n",
      "/usr/local/lib/python3.11/dist-packages/learntools/pandas/grouping_and_sorting.py:35: FutureWarning: The provided callable <built-in function min> is currently using SeriesGroupBy.min. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"min\" instead.\n",
      "  _expected = reviews.groupby('variety').price.agg([min, max]).sort_values(by=['min', 'max'], ascending=False)\n",
      "/usr/local/lib/python3.11/dist-packages/learntools/pandas/grouping_and_sorting.py:35: FutureWarning: The provided callable <built-in function max> is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n",
      "  _expected = reviews.groupby('variety').price.agg([min, max]).sort_values(by=['min', 'max'], ascending=False)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "reviews = pd.read_csv(\"../input/wine-reviews/winemag-data-130k-v2.csv\", index_col=0)\n",
    "#pd.set_option(\"display.max_rows\", 5)\n",
    "\n",
    "from learntools.core import binder; binder.bind(globals())\n",
    "from learntools.pandas.grouping_and_sorting import *\n",
    "print(\"Setup complete.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e529f6e",
   "metadata": {
    "papermill": {
     "duration": 0.003904,
     "end_time": "2025-05-30T15:37:46.852580",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.848676",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b8b67a0",
   "metadata": {
    "papermill": {
     "duration": 0.004114,
     "end_time": "2025-05-30T15:37:46.860901",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.856787",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1.\n",
    "Who are the most common wine reviewers in the dataset? Create a `Series` whose index is the `taster_twitter_handle` category from the dataset, and whose values count how many reviews each person wrote."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9682b3ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:46.870349Z",
     "iopub.status.busy": "2025-05-30T15:37:46.870078Z",
     "iopub.status.idle": "2025-05-30T15:37:46.889582Z",
     "shell.execute_reply": "2025-05-30T15:37:46.888774Z"
    },
    "papermill": {
     "duration": 0.025959,
     "end_time": "2025-05-30T15:37:46.890891",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.864932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_ReviewsWritten\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "\n",
       "```python\n",
       "reviews_written = reviews.groupby('taster_twitter_handle').size()\n",
       "```\n",
       "or\n",
       "```python\n",
       "reviews_written = reviews.groupby('taster_twitter_handle').taster_twitter_handle.count()\n",
       "```\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "\n",
       "```python\n",
       "reviews_written = reviews.groupby('taster_twitter_handle').size()\n",
       "```\n",
       "or\n",
       "```python\n",
       "reviews_written = reviews.groupby('taster_twitter_handle').taster_twitter_handle.count()\n",
       "```"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Your code here\n",
    "reviews_written = reviews.groupby('taster_twitter_handle').size()\n",
    "\n",
    "# Check your answer\n",
    "q1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "94f08b21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:46.901115Z",
     "iopub.status.busy": "2025-05-30T15:37:46.900831Z",
     "iopub.status.idle": "2025-05-30T15:37:46.904525Z",
     "shell.execute_reply": "2025-05-30T15:37:46.903654Z"
    },
    "papermill": {
     "duration": 0.010565,
     "end_time": "2025-05-30T15:37:46.905953",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.895388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q1.hint()\n",
    "#q1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9de83ba",
   "metadata": {
    "papermill": {
     "duration": 0.004191,
     "end_time": "2025-05-30T15:37:46.914641",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.910450",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2.\n",
    "What is the best wine I can buy for a given amount of money? Create a `Series` whose index is wine prices and whose values is the maximum number of points a wine costing that much was given in a review. Sort the values by price, ascending (so that `4.0` dollars is at the top and `3300.0` dollars is at the bottom)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "255872f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:46.924578Z",
     "iopub.status.busy": "2025-05-30T15:37:46.924235Z",
     "iopub.status.idle": "2025-05-30T15:37:46.936240Z",
     "shell.execute_reply": "2025-05-30T15:37:46.935120Z"
    },
    "papermill": {
     "duration": 0.019039,
     "end_time": "2025-05-30T15:37:46.937910",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.918871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_BestRatingPerPrice\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "best_rating_per_price = reviews.groupby('price')['points'].max().sort_index()\n",
    "\n",
    "# Check your answer\n",
    "q2.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cafa61ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:46.948923Z",
     "iopub.status.busy": "2025-05-30T15:37:46.948229Z",
     "iopub.status.idle": "2025-05-30T15:37:46.952262Z",
     "shell.execute_reply": "2025-05-30T15:37:46.951339Z"
    },
    "papermill": {
     "duration": 0.011052,
     "end_time": "2025-05-30T15:37:46.953891",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.942839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q2.hint()\n",
    "#q2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c6838ba",
   "metadata": {
    "papermill": {
     "duration": 0.004395,
     "end_time": "2025-05-30T15:37:46.963048",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.958653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3.\n",
    "What are the minimum and maximum prices for each `variety` of wine? Create a `DataFrame` whose index is the `variety` category from the dataset and whose values are the `min` and `max` values thereof."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f5e3190d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:46.973457Z",
     "iopub.status.busy": "2025-05-30T15:37:46.973140Z",
     "iopub.status.idle": "2025-05-30T15:37:46.997602Z",
     "shell.execute_reply": "2025-05-30T15:37:46.996751Z"
    },
    "papermill": {
     "duration": 0.031477,
     "end_time": "2025-05-30T15:37:46.999138",
     "exception": false,
     "start_time": "2025-05-30T15:37:46.967661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"3_PriceExtremes\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "price_extremes = (\n",
    "    reviews\n",
    "        .groupby('variety')['price']\n",
    "        .agg(['min', 'max'])\n",
    "        .sort_index()\n",
    ")\n",
    "\n",
    "# Check your answer\n",
    "q3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f594e8c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:47.010245Z",
     "iopub.status.busy": "2025-05-30T15:37:47.009955Z",
     "iopub.status.idle": "2025-05-30T15:37:47.013668Z",
     "shell.execute_reply": "2025-05-30T15:37:47.012941Z"
    },
    "papermill": {
     "duration": 0.010994,
     "end_time": "2025-05-30T15:37:47.015005",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.004011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q3.hint()\n",
    "#q3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e82b6bf3",
   "metadata": {
    "papermill": {
     "duration": 0.004626,
     "end_time": "2025-05-30T15:37:47.025038",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.020412",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4.\n",
    "What are the most expensive wine varieties? Create a variable `sorted_varieties` containing a copy of the dataframe from the previous question where varieties are sorted in descending order based on minimum price, then on maximum price (to break ties)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eceeac1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:47.035530Z",
     "iopub.status.busy": "2025-05-30T15:37:47.035256Z",
     "iopub.status.idle": "2025-05-30T15:37:47.044896Z",
     "shell.execute_reply": "2025-05-30T15:37:47.044120Z"
    },
    "papermill": {
     "duration": 0.016577,
     "end_time": "2025-05-30T15:37:47.046297",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.029720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"4_SortedVarieties\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sorted_varieties = (\n",
    "    price_extremes\n",
    "        .sort_values(\n",
    "            by=['min', 'max'],\n",
    "            ascending=[False, False]\n",
    "        )\n",
    "        .copy()\n",
    ")\n",
    "\n",
    "# Check your answer\n",
    "q4.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6d65e240",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:47.057851Z",
     "iopub.status.busy": "2025-05-30T15:37:47.057518Z",
     "iopub.status.idle": "2025-05-30T15:37:47.061197Z",
     "shell.execute_reply": "2025-05-30T15:37:47.060453Z"
    },
    "papermill": {
     "duration": 0.011042,
     "end_time": "2025-05-30T15:37:47.062496",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.051454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q4.hint()\n",
    "#q4.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91538b81",
   "metadata": {
    "papermill": {
     "duration": 0.004682,
     "end_time": "2025-05-30T15:37:47.072191",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.067509",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5.\n",
    "Create a `Series` whose index is reviewers and whose values is the average review score given out by that reviewer. Hint: you will need the `taster_name` and `points` columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7a7ce09e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:47.083037Z",
     "iopub.status.busy": "2025-05-30T15:37:47.082754Z",
     "iopub.status.idle": "2025-05-30T15:37:47.101522Z",
     "shell.execute_reply": "2025-05-30T15:37:47.100817Z"
    },
    "papermill": {
     "duration": 0.025659,
     "end_time": "2025-05-30T15:37:47.102807",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.077148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"5_ReviewerMeanRatings\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "reviewer_mean_ratings = (\n",
    "    reviews\n",
    "      .groupby('taster_name')['points']\n",
    "      .mean()\n",
    ")\n",
    "\n",
    "# Check your answer\n",
    "q5.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "be963315",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:47.114681Z",
     "iopub.status.busy": "2025-05-30T15:37:47.113974Z",
     "iopub.status.idle": "2025-05-30T15:37:47.117882Z",
     "shell.execute_reply": "2025-05-30T15:37:47.117292Z"
    },
    "papermill": {
     "duration": 0.011158,
     "end_time": "2025-05-30T15:37:47.119158",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.108000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q5.hint()\n",
    "#q5.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e996c9fd",
   "metadata": {
    "papermill": {
     "duration": 0.004897,
     "end_time": "2025-05-30T15:37:47.129165",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.124268",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Are there significant differences in the average scores assigned by the various reviewers? Run the cell below to use the `describe()` method to see a summary of the range of values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "231162e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:47.140502Z",
     "iopub.status.busy": "2025-05-30T15:37:47.139745Z",
     "iopub.status.idle": "2025-05-30T15:37:47.151133Z",
     "shell.execute_reply": "2025-05-30T15:37:47.150262Z"
    },
    "papermill": {
     "duration": 0.018557,
     "end_time": "2025-05-30T15:37:47.152519",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.133962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    19.000000\n",
       "mean     88.233026\n",
       "std       1.243610\n",
       "min      85.855422\n",
       "25%      87.323501\n",
       "50%      88.536235\n",
       "75%      88.975256\n",
       "max      90.562551\n",
       "Name: points, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviewer_mean_ratings.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3c0255e",
   "metadata": {
    "papermill": {
     "duration": 0.004797,
     "end_time": "2025-05-30T15:37:47.162766",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.157969",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6.\n",
    "What combination of countries and varieties are most common? Create a `Series` whose index is a `MultiIndex`of `{country, variety}` pairs. For example, a pinot noir produced in the US should map to `{\"US\", \"Pinot Noir\"}`. Sort the values in the `Series` in descending order based on wine count."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a860caf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:47.173943Z",
     "iopub.status.busy": "2025-05-30T15:37:47.173640Z",
     "iopub.status.idle": "2025-05-30T15:37:47.208713Z",
     "shell.execute_reply": "2025-05-30T15:37:47.207729Z"
    },
    "papermill": {
     "duration": 0.042285,
     "end_time": "2025-05-30T15:37:47.210098",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.167813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"6_GroupbyCountryVariety\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "country_variety_counts = reviews.groupby(['country', 'variety']).size().sort_values(ascending=False)\n",
    "\n",
    "# Check your answer\n",
    "q6.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "553ac84b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-30T15:37:47.222678Z",
     "iopub.status.busy": "2025-05-30T15:37:47.222077Z",
     "iopub.status.idle": "2025-05-30T15:37:47.226052Z",
     "shell.execute_reply": "2025-05-30T15:37:47.225134Z"
    },
    "papermill": {
     "duration": 0.012032,
     "end_time": "2025-05-30T15:37:47.227732",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.215700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q6.hint()\n",
    "#q6.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63dbe38f",
   "metadata": {
    "papermill": {
     "duration": 0.005253,
     "end_time": "2025-05-30T15:37:47.238952",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.233699",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep going\n",
    "\n",
    "Move on to the [**data types and missing data**](https://www.kaggle.com/residentmario/data-types-and-missing-values)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8423a7b7",
   "metadata": {
    "papermill": {
     "duration": 0.005028,
     "end_time": "2025-05-30T15:37:47.249398",
     "exception": false,
     "start_time": "2025-05-30T15:37:47.244370",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/pandas/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 655,
     "sourceId": 1252,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2321,
     "sourceId": 3919,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2894,
     "sourceId": 4877,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3491,
     "sourceId": 5624,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1442,
     "sourceId": 8172,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 9366,
     "sourceId": 13206,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 179555,
     "sourceId": 403916,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4549,
     "sourceId": 466349,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2478,
     "sourceId": 1151655,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 10128,
     "sourceId": 5438389,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.696313,
   "end_time": "2025-05-30T15:37:47.774781",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-30T15:37:37.078468",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
